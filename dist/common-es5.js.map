{"version":3,"sources":["webpack:///./node_modules/guid-typescript/dist/guid.js","webpack:///./node_modules/typescript-string-operations/dist/index.min.js","webpack:///./src/app/models/constants.ts"],"names":[],"mappings":";;;;;;;;;;AAAa;AACb;AACA;AACA;AACA;AACA,kDAAkD;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,WAAW;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,GAAG;AAC9F;AACA;AACA,CAAC;AACD;;;;;;;;;;;;;ACxDa;AACb,8CAA8C,cAAc;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,uBAAuB;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,qBAAqB;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD,kDAAkD,EAAE;AACrG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,uBAAuB;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,uBAAuB;AAC9D;AACA;AACA;AACA,mCAAmC;AACnC,uCAAuC;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAiE,IAAI;AACrE;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,KAAK,EAAE,KAAK,EAAE,OAAO;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,OAAO,EAAE,KAAK,EAAE,KAAK;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sEAAsE,EAAE;AACxE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,uBAAuB;AAC/C;AACA;AACA;AACA,uBAAuB,iBAAiB;AACxC;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,kBAAkB;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,aAAa;AACxC,2BAA2B,aAAa;AACxC;AACA;AACA,CAAC;AACD;AACA;AACA;AACA,+BAA+B,sBAAsB;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,uBAAuB;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;;;;;;;;;;;;;AC5PA;AAAA;AAAA;IAAA;IASA,CAAC;IAP8B,oBAAU,GAAG,YAAY,CAAC;IAC1B,gBAAM,GAAG,QAAQ,CAAC;IAClB,sBAAY,GAAG,gBAAgB,CAAC;IAChC,sBAAY,GAAG,gBAAgB,CAAC;IAChC,0BAAgB,GAAG,oBAAoB,CAAC;IACxC,kBAAQ,GAAG,WAAW,CAAC;IAEtD,gBAAC;CAAA;AATqB","file":"common-es5.js","sourcesContent":["\"use strict\";\r\nexports.__esModule = true;\r\nvar Guid = /** @class */ (function () {\r\n    function Guid(guid) {\r\n        if (!guid) {\r\n            throw new TypeError(\"Invalid argument; `value` has no value.\");\r\n        }\r\n        this.value = Guid.EMPTY;\r\n        if (guid && Guid.isGuid(guid)) {\r\n            this.value = guid;\r\n        }\r\n    }\r\n    Guid.isGuid = function (guid) {\r\n        var value = guid.toString();\r\n        return guid && (guid instanceof Guid || Guid.validator.test(value));\r\n    };\r\n    Guid.create = function () {\r\n        return new Guid([Guid.gen(2), Guid.gen(1), Guid.gen(1), Guid.gen(1), Guid.gen(3)].join(\"-\"));\r\n    };\r\n    Guid.createEmpty = function () {\r\n        return new Guid(\"emptyguid\");\r\n    };\r\n    Guid.parse = function (guid) {\r\n        return new Guid(guid);\r\n    };\r\n    Guid.raw = function () {\r\n        return [Guid.gen(2), Guid.gen(1), Guid.gen(1), Guid.gen(1), Guid.gen(3)].join(\"-\");\r\n    };\r\n    Guid.gen = function (count) {\r\n        var out = \"\";\r\n        for (var i = 0; i < count; i++) {\r\n            // tslint:disable-next-line:no-bitwise\r\n            out += (((1 + Math.random()) * 0x10000) | 0).toString(16).substring(1);\r\n        }\r\n        return out;\r\n    };\r\n    Guid.prototype.equals = function (other) {\r\n        // Comparing string `value` against provided `guid` will auto-call\r\n        // toString on `guid` for comparison\r\n        return Guid.isGuid(other) && this.value === other.toString();\r\n    };\r\n    Guid.prototype.isEmpty = function () {\r\n        return this.value === Guid.EMPTY;\r\n    };\r\n    Guid.prototype.toString = function () {\r\n        return this.value;\r\n    };\r\n    Guid.prototype.toJSON = function () {\r\n        return {\r\n            value: this.value\r\n        };\r\n    };\r\n    Guid.validator = new RegExp(\"^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$\", \"i\");\r\n    Guid.EMPTY = \"00000000-0000-0000-0000-000000000000\";\r\n    return Guid;\r\n}());\r\nexports.Guid = Guid;\r\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar String = (function () {\n    function String() {\n    }\n    String.IsNullOrWhiteSpace = function (value) {\n        try {\n            if (value == null || value == 'undefined') {\n                return true;\n            }\n            return value.toString().replace(/\\s/g, '').length < 1;\n        }\n        catch (e) {\n            console.log(e);\n            return false;\n        }\n    };\n    String.Join = function (delimiter) {\n        var args = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            args[_i - 1] = arguments[_i];\n        }\n        try {\n            var firstArg = args[0];\n            if (Array.isArray(firstArg) || firstArg instanceof Array) {\n                var tempString = String.Empty;\n                var count = 0;\n                for (var i = 0; i < firstArg.length; i++) {\n                    var current = firstArg[i];\n                    if (i < firstArg.length - 1) {\n                        tempString += current + delimiter;\n                    }\n                    else {\n                        tempString += current;\n                    }\n                }\n                return tempString;\n            }\n            else if (typeof firstArg === 'object') {\n                var tempString_1 = String.Empty;\n                var objectArg_1 = firstArg;\n                var keys = Object.keys(firstArg);\n                keys.forEach(function (element) { tempString_1 += objectArg_1[element] + delimiter; });\n                tempString_1 = tempString_1.slice(0, tempString_1.length - delimiter.length);\n                return tempString_1;\n            }\n            var stringArray = args;\n            return String.join.apply(String, [delimiter].concat(stringArray));\n        }\n        catch (e) {\n            console.log(e);\n            return String.Empty;\n        }\n    };\n    String.Format = function (format) {\n        var args = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            args[_i - 1] = arguments[_i];\n        }\n        try {\n            if (format.match(String.regexNumber)) {\n                return String.format(String.regexNumber, format, args);\n            }\n            if (format.match(String.regexObject)) {\n                return String.format(String.regexObject, format, args, true);\n            }\n            return format;\n        }\n        catch (e) {\n            console.log(e);\n            return String.Empty;\n        }\n    };\n    String.format = function (regex, format, args, parseByObject) {\n        if (parseByObject === void 0) { parseByObject = false; }\n        return format.replace(regex, function (match, x) {\n            var s = match.split(':');\n            if (s.length > 1) {\n                x = s[0].replace('{', '');\n                match = s[1].replace('}', '');\n            }\n            var arg;\n            if (parseByObject) {\n                arg = args[0][x];\n            }\n            else {\n                arg = args[x];\n            }\n            if (arg == null || arg == undefined || match.match(/{\\d+}/)) {\n                return arg;\n            }\n            arg = String.parsePattern(match, arg);\n            return typeof arg != 'undefined' && arg != null ? arg : String.Empty;\n        });\n    };\n    String.parsePattern = function (match, arg) {\n        switch (match) {\n            case 'L': {\n                arg = arg.toLowerCase();\n                return arg;\n            }\n            case 'U': {\n                arg = arg.toUpperCase();\n                return arg;\n            }\n            case 'd': {\n                if (typeof (arg) === 'string') {\n                    return String.getDisplayDateFromString(arg);\n                }\n                else if (arg instanceof Date) {\n                    return String.Format('{0:00}.{1:00}.{2:0000}', arg.getDate(), arg.getMonth(), arg.getFullYear());\n                }\n                break;\n            }\n            case 's': {\n                if (typeof (arg) === 'string') {\n                    return String.getSortableDateFromString(arg);\n                }\n                else if (arg instanceof Date) {\n                    return String.Format('{0:0000}-{1:00}-{2:00}', arg.getFullYear(), arg.getMonth(), arg.getDate());\n                }\n                break;\n            }\n            case 'n': {\n                if (typeof (arg) !== \"string\")\n                    arg = arg.toString();\n                var replacedString = arg.replace(/,/g, '.');\n                if (isNaN(parseFloat(replacedString)) || replacedString.length <= 3) {\n                    break;\n                }\n                var numberparts = replacedString.split(/[^0-9]+/g);\n                var parts = numberparts;\n                if (numberparts.length > 1) {\n                    parts = [String.join.apply(String, [''].concat((numberparts.splice(0, numberparts.length - 1)))), numberparts[numberparts.length - 1]];\n                }\n                var integer = parts[0];\n                var mod = integer.length % 3;\n                var output = (mod > 0 ? (integer.substring(0, mod)) : String.Empty);\n                var firstGroup = output;\n                var remainingGroups = integer.substring(mod).match(/.{3}/g);\n                output = output + '.' + String.Join('.', remainingGroups);\n                arg = output + (parts.length > 1 ? ',' + parts[1] : '');\n                return arg;\n            }\n            default: {\n                break;\n            }\n        }\n        if ((typeof (arg) === 'number' || !isNaN(arg)) && !isNaN(+match) && !String.IsNullOrWhiteSpace(arg)) {\n            return String.formatNumber(arg, match);\n        }\n        return arg;\n    };\n    String.getDisplayDateFromString = function (input) {\n        var splitted;\n        splitted = input.split('-');\n        if (splitted.length <= 1) {\n            return input;\n        }\n        var day = splitted[splitted.length - 1];\n        var month = splitted[splitted.length - 2];\n        var year = splitted[splitted.length - 3];\n        day = day.split('T')[0];\n        day = day.split(' ')[0];\n        return day + \".\" + month + \".\" + year;\n    };\n    String.getSortableDateFromString = function (input) {\n        var splitted = input.replace(',', '').split('.');\n        if (splitted.length <= 1) {\n            return input;\n        }\n        var times = splitted[splitted.length - 1].split(' ');\n        var time = String.Empty;\n        if (times.length > 1) {\n            time = times[times.length - 1];\n        }\n        var year = splitted[splitted.length - 1].split(' ')[0];\n        var month = splitted[splitted.length - 2];\n        var day = splitted[splitted.length - 3];\n        var result = year + \"-\" + month + \"-\" + day;\n        if (!String.IsNullOrWhiteSpace(time) && time.length > 1) {\n            result += \"T\" + time;\n        }\n        else {\n            result += \"T00:00:00\";\n        }\n        return result;\n    };\n    String.formatNumber = function (input, formatTemplate) {\n        var count = formatTemplate.length;\n        var stringValue = input.toString();\n        if (count <= stringValue.length) {\n            return stringValue;\n        }\n        var remainingCount = count - stringValue.length;\n        remainingCount += 1;\n        return new Array(remainingCount).join('0') + stringValue;\n    };\n    String.join = function (delimiter) {\n        var args = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            args[_i - 1] = arguments[_i];\n        }\n        var temp = String.Empty;\n        for (var i = 0; i < args.length; i++) {\n            if ((typeof args[i] == 'string' && String.IsNullOrWhiteSpace(args[i]))\n                || (typeof args[i] != \"number\" && typeof args[i] != \"string\")) {\n                continue;\n            }\n            var arg = \"\" + args[i];\n            temp += arg;\n            for (var i2 = i + 1; i2 < args.length; i2++) {\n                if (String.IsNullOrWhiteSpace(args[i2])) {\n                    continue;\n                }\n                temp += delimiter;\n                i = i2 - 1;\n                break;\n            }\n        }\n        return temp;\n    };\n    String.regexNumber = /{(\\d+(:\\w*)?)}/g;\n    String.regexObject = /{(\\w+(:\\w*)?)}/g;\n    String.Empty = '';\n    return String;\n}());\nexports.String = String;\nvar StringBuilder = (function () {\n    function StringBuilder(value) {\n        if (value === void 0) { value = String.Empty; }\n        this.Values = [];\n        this.Values = new Array(value);\n    }\n    StringBuilder.prototype.ToString = function () {\n        return this.Values.join('');\n    };\n    StringBuilder.prototype.Append = function (value) {\n        this.Values.push(value);\n    };\n    StringBuilder.prototype.AppendFormat = function (format) {\n        var args = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            args[_i - 1] = arguments[_i];\n        }\n        this.Values.push(String.Format.apply(String, [format].concat(args)));\n    };\n    StringBuilder.prototype.Clear = function () {\n        this.Values = [];\n    };\n    return StringBuilder;\n}());\nexports.StringBuilder = StringBuilder;\n","export class Constants {\r\n\r\n        public static readonly Superadmin = \"Superadmin\";\r\n        public static readonly Brewer = \"brewer\";\r\n        public static readonly OrgSuperUser = \"Org Super User\";\r\n        public static readonly OrgAdminUser = \"Org Admin User\";\r\n        public static readonly OrgDashboardUser = \"Org Dashboard User\";\r\n        public static readonly DemoUser = \"Demo User\";\r\n\r\n}"],"sourceRoot":""}